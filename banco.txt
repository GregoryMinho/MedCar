\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
				BANCO DO RELATORIOS DE PACIENTES DA EMPRESA (area_empresas/relatorios.php)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


-- Criando o banco de dados
CREATE DATABASE IF NOT EXISTS medcar_agendamentos;

-- Selecionando o banco de dados
USE medcar_agendamentos;

-- Estrutura para tabela `empresas`
CREATE TABLE `empresas` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- Estrutura para tabela `pacientes_registros`
CREATE TABLE `pacientes_registros` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL,
  `data_consulta` date NOT NULL,
  `horario` time NOT NULL,
  `destino` varchar(255) NOT NULL,
  `status` enum('agendado','concluido','cancelado') NOT NULL,
  `data_agendamento` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `usuario_id` int(11) NOT NULL,
  `empresa_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- Despejando dados para a tabela `pacientes_registros`
INSERT INTO `pacientes_registros` (`id`, `nome`, `data_consulta`, `horario`, `destino`, `status`, `data_agendamento`, `usuario_id`, `empresa_id`) VALUES
(1, 'Maria Oliveira', '2024-03-22', '10:30:00', 'Clínica Saúde Total', 'Agendado', '2025-03-10 15:43:00', 1, 1),
(2, 'João Silva', '2024-03-15', '14:00:00', 'Hospital Santa Maria', 'concluido', '2025-03-10 15:43:00', 2, 2),
(3, 'Carlos Magnos', '2024-03-25', '15:30:00', 'Hospital São Rafael', 'Cancelado', '2025-03-10 15:43:00', 3, 3);

-- Acionadores `pacientes_registros`
DELIMITER $$
CREATE TRIGGER `before_insert_pacientes_registros` BEFORE INSERT ON `pacientes_registros` FOR EACH ROW BEGIN
    DECLARE usuario_exists INT;
    DECLARE empresa_exists INT;

    -- Verifica se o usuario_id existe na tabela de usuários
    SELECT COUNT(*) INTO usuario_exists FROM usuarios WHERE id = NEW.usuario_id;
    IF usuario_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Usuario ID não existe';
    END IF;

    -- Verifica se o empresa_id existe na tabela de empresas
    SELECT COUNT(*) INTO empresa_exists FROM empresas WHERE id = NEW.empresa_id;
    IF empresa_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Empresa ID não existe';
    END IF;
END
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `before_update_pacientes_registros` BEFORE UPDATE ON `pacientes_registros` FOR EACH ROW BEGIN
    DECLARE usuario_exists INT;
    DECLARE empresa_exists INT;

    -- Verifica se o usuario_id existe na tabela de usuários
    SELECT COUNT(*) INTO usuario_exists FROM usuarios WHERE id = NEW.usuario_id;
    IF usuario_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Usuario ID não existe';
    END IF;

    -- Verifica se o empresa_id existe na tabela de empresas
    SELECT COUNT(*) INTO empresa_exists FROM empresas WHERE id = NEW.empresa_id;
    IF empresa_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Empresa ID não existe';
    END IF;
END
$$
DELIMITER ;

-- Estrutura para tabela `usuarios`
CREATE TABLE `usuarios` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

-- Índices para tabelas despejadas

-- Índices de tabela `empresas`
ALTER TABLE `empresas`
  ADD PRIMARY KEY (`id`);

-- Índices de tabela `pacientes_registros`
ALTER TABLE `pacientes_registros`
  ADD PRIMARY KEY (`id`);

-- Índices de tabela `usuarios`
ALTER TABLE `usuarios`
  ADD PRIMARY KEY (`id`);

-- AUTO_INCREMENT para tabelas despejadas

-- AUTO_INCREMENT de tabela `empresas`
ALTER TABLE `empresas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

-- AUTO_INCREMENT de tabela `pacientes_registros`
ALTER TABLE `pacientes_registros`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

-- AUTO_INCREMENT de tabela `usuarios`
ALTER TABLE `usuarios`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
COMMIT;






\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
					BANCO DO FINANCEIRO (area_empresas/relatorios_financeiros.php)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- Criação do banco de dados
CREATE DATABASE MedCar_Financeiro;

-- Selecionando o banco de dados
USE MedCar_Financeiro;

-- Tabela para armazenar as transações
CREATE TABLE transacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data DATE NOT NULL,
    descricao VARCHAR(255) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    status ENUM('Pago', 'Pendente') NOT NULL
);

-- Tabela para armazenar as métricas financeiras
CREATE TABLE metricas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo VARCHAR(50) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    descricao VARCHAR(255) NOT NULL
);

-- Tabela para armazenar os gráficos de faturamento mensal
CREATE TABLE faturamento_mensal (
    id INT AUTO_INCREMENT PRIMARY KEY,
    mes INT NOT NULL,
    ano INT NOT NULL,
    faturamento DECIMAL(10, 2) NOT NULL
);

-- Inserção de dados de transações de exemplo
INSERT INTO transacoes (data, descricao, valor, status) 
VALUES 
('2024-03-15', 'Transporte Paciente - J. Silva', 850.00, 'Pago'),
('2024-03-14', 'Manutenção Veicular', 2350.00, 'Pendente');

-- Inserção de dados de métricas financeiras
INSERT INTO metricas (tipo, valor, descricao) 
VALUES 
('faturamento', 152000.00, 'Faturamento Total'),
('despesas', 107000.00, 'Despesas Totais'),
('lucroliquido', 45000.00, 'Lucro Líquido'),
('ticketmedio', 780.00, 'Ticket Médio'),
('transacoes', 194, 'Número Total de Transações'),
('pendentes', 15000.00, 'Total de Pendentes'),
('clientesativos', 48, 'Número de Clientes Ativos');

-- Inserção de dados de faturamento mensal
INSERT INTO faturamento_mensal (mes, ano, faturamento) 
VALUES 
(1, 2024, 120000.00),
(2, 2024, 135000.00),
(3, 2024, 152000.00),
(4, 2024, 142000.00),
(5, 2024, 160000.00),
(6, 2024, 175000.00);


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
					BANCO DE MOTORISTAS(area_empresas/relatorios_financeiros.php)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


CREATE DATABASE Motoristas_MedCar;
USE Motoristas_MedCar;

-- Tabela de Motoristas
CREATE TABLE Motoristas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cnh VARCHAR(20) UNIQUE NOT NULL,
    status ENUM('Ativo', 'Inativo', 'Em Serviço') NOT NULL,
    cidade VARCHAR(50) NOT NULL,
    estado VARCHAR(2) NOT NULL,
    foto_url VARCHAR(255)
);

-- Tabela de Veículos
CREATE TABLE Veiculos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    motorista_id INT NOT NULL,
    placa VARCHAR(10) UNIQUE NOT NULL,
    modelo VARCHAR(50) NOT NULL,
    FOREIGN KEY (motorista_id) REFERENCES Motoristas(id) ON DELETE CASCADE
);

-- Inserção de dados de exemplo
INSERT INTO Motoristas (nome, cnh, status, cidade, estado, foto_url) VALUES
('João Silva', '123456789', 'Ativo', 'São Paulo', 'SP', 'https://source.unsplash.com/random/80x80/?person'),
('Maria Oliveira', '987654321', 'Em Serviço', 'Rio de Janeiro', 'RJ', 'https://source.unsplash.com/random/80x80/?person');

INSERT INTO Veiculos (motorista_id, placa, modelo) VALUES
(1, 'ABC-1234', 'Sedan'),
(2, 'XYZ-5678', 'SUV');


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
					BANCO DE AGENDAMENTOS
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

-- Criando o banco de dados
CREATE DATABASE IF NOT EXISTS medcar_agendamentos;

-- Selecionando o banco de dados
USE medcar_agendamentos;

-- Cria a tabela "agendamentos" para armazenar os dados dos agendamentos
CREATE TABLE IF NOT EXISTS agendamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    empresa_id INT NOT NULL,
    data_consulta DATE NOT NULL,
    horario TIME NOT NULL,
    rua_origem VARCHAR(255),
    numero_origem VARCHAR(10),
    complemento_origem VARCHAR(255),
    cidade_origem VARCHAR(100),
    cep_origem VARCHAR(10),
    rua_destino VARCHAR(255),
    numero_destino VARCHAR(10),
    complemento_destino VARCHAR(255),
    cidade_destino VARCHAR(100),
    cep_destino VARCHAR(10),
    condicao_medica TEXT,
    precisa_oxigenio TINYINT,
    precisa_assistencia TINYINT,
    precisa_monitor TINYINT,
    medicamentos TEXT,
    alergias TEXT,
    contato_emergencia VARCHAR(255),
    informacoes_adicionais TEXT,
    acompanhante TINYINT,
    tipo_transporte VARCHAR(50),
    situacao ENUM('Pendente','Agendado', 'Concluído', 'Cancelado') NOT NULL,
    agendado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insere dados de exemplo (os mesmos exibidos na página)
INSERT INTO agendamentos (cliente_id, empresa_id, data_consulta, horario, rua_origem, numero_origem, complemento_origem, cidade_origem, cep_origem, rua_destino, numero_destino, complemento_destino, cidade_destino, cep_destino, condicao_medica, precisa_oxigenio, precisa_assistencia, precisa_monitor, medicamentos, alergias, contato_emergencia, informacoes_adicionais, acompanhante, tipo_transporte, situacao) VALUES
(1, 1, '2024-03-22', '10:30:00', 'Rua A', '123', 'Apto 1', 'Cidade A', '12345-678', 'Rua B', '456', 'Sala 2', 'Cidade B', '87654-321', 'Condição A', 1, 0, 0, 'Medicamento A', 'Alergia A', 'Contato A', 'Info A', 1, 'Padrão', 'Pendente'),
(2, 2, '2024-03-15', '14:00:00', 'Rua C', '789', 'Apto 3', 'Cidade C', '23456-789', 'Rua D', '012', 'Sala 4', 'Cidade D', '98765-432', 'Condição B', 0, 1, 0, 'Medicamento B', 'Alergia B', 'Contato B', 'Info B', 0, 'Cadeirante', 'Agendado'),
(3, 3, '2024-03-25', '15:30:00', 'Rua E', '345', 'Apto 5', 'Cidade E', '34567-890', 'Rua F', '678', 'Sala 6', 'Cidade F', '09876-543', 'Condição C', 0, 0, 1, 'Medicamento C', 'Alergia C', 'Contato C', 'Info C', 2, 'Maca', 'Concluído');

-- Cria o TRIGGER para verificar a existência de cliente_id e empresa_id antes de inserir
DELIMITER //
CREATE TRIGGER before_insert_agendamentos_registros
BEFORE INSERT ON agendamentos_registros
FOR EACH ROW
BEGIN
    DECLARE cliente_exists INT;
    DECLARE empresa_exists INT;

    -- Verifica se o cliente_id existe no banco de dados de usuários
    SELECT COUNT(*) INTO cliente_exists FROM usuarios_db.usuarios WHERE id = NEW.cliente_id;
    IF cliente_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cliente ID não existe';
    END IF;

    -- Verifica se o empresa_id existe na tabela de empresas
    SELECT COUNT(*) INTO empresa_exists FROM empresas WHERE id = NEW.empresa_id;
    IF empresa_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Empresa ID não existe';
    END IF;
END
$$
DELIMITER ;

-- Cria o TRIGGER para verificar a existência de cliente_id e empresa_id antes de atualizar
DELIMITER //
CREATE TRIGGER before_update_agendamentos_registros
BEFORE UPDATE ON agendamentos_registros
FOR EACH ROW
BEGIN
    DECLARE cliente_exists INT;
    DECLARE empresa_exists INT;

    -- Verifica se o cliente_id existe no banco de dados de usuários
    SELECT COUNT(*) INTO cliente_exists FROM usuarios_db.usuarios WHERE id = NEW.cliente_id;
    IF cliente_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cliente ID não existe';
    END IF;

    -- Verifica se o empresa_id existe na tabela de empresas
    SELECT COUNT(*) INTO empresa_exists FROM empresas WHERE id = NEW.empresa_id;
    IF empresa_exists = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Empresa ID não existe';
    END IF;
END
$$
DELIMITER ;

-- Estrutura para tabela `usuarios`
CREATE TABLE `usuarios` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

INSERT INTO `usuarios` (`id`, `nome`) VALUES
(1, 'João'),
(2, 'Maria'),
(3, 'Carlos'),
(4, 'Ana');


-- Índices para tabelas despejadas

-- Índices de tabela `empresas`
ALTER TABLE `empresas`
  ADD PRIMARY KEY (`id`);

-- Índices de tabela `pacientes_registros`
ALTER TABLE `pacientes_registros`
  ADD PRIMARY KEY (`id`);

-- Índices de tabela `usuarios`
ALTER TABLE `usuarios`
  ADD PRIMARY KEY (`id`);

-- AUTO_INCREMENT para tabelas despejadas

-- AUTO_INCREMENT de tabela `empresas`
ALTER TABLE `empresas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

-- AUTO_INCREMENT de tabela `pacientes_registros`
ALTER TABLE `pacientes_registros`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

-- AUTO_INCREMENT de tabela `usuarios`
ALTER TABLE `usuarios`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
COMMIT;

    criada_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (agendamento_id) REFERENCES agendamentos(id)
);

INSERT INTO pacientes (nome, data_nascimento, telefone, endereco) VALUES
('João da Silva', '1985-07-20', '11999999999', 'Rua A, 123, São Paulo'),
('Maria Oliveira', '1990-11-15', '11888888888', 'Av. B, 456, Rio de Janeiro');

-- Inserts para transportadoras
INSERT INTO transportadoras (nome, telefone, email) VALUES
('TransMed', '11997777777', 'contato@transmed.com'),
('Saúde Transporte', '11886666666', 'suporte@saudetransporte.com');

-- Inserts para agendamentos
INSERT INTO agendamentos (paciente_id, transportadora_id, data_hora, destino, tipo, status) VALUES
(1, 1, '2025-03-15 10:00:00', 'Hospital Central', 'exame', 'pendente'),
(2, 2, '2025-03-16 14:30:00', 'Clínica Saúde', 'rotina', 'confirmado');

-- Inserts para notificações
INSERT INTO notificacoes (agendamento_id, mensagem, lida) VALUES
(1, 'Seu agendamento para exame está pendente.', FALSE),
(2, 'Seu agendamento para rotina foi confirmado.', TRUE);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
					BANCO DE DASHBOARD
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE DATABASE IF NOT EXISTS dashboard_medcar;
USE dashboard_medcar;

-- Tabela de Empresas (opcional, caso haja multiempresa ou dados institucionais)
CREATE TABLE empresas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    logo VARCHAR(255)
);

-- Tabela de Motoristas
CREATE TABLE motoristas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    -- Exemplos de status: 'Disponível', 'Em serviço', 'Indisponível'
    status ENUM('Disponível', 'Em serviço', 'Indisponível') DEFAULT 'Disponível'
);

-- Tabela de Veículos (Frota)
CREATE TABLE veiculos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    placa VARCHAR(10) NOT NULL UNIQUE,
    -- Status: 'disponivel' (disponível), 'em_uso' (em uso) ou 'manutencao' (manutenção)
    status ENUM('disponivel', 'em_uso', 'manutencao') DEFAULT 'disponivel',
    ultima_manutencao DATE
);

-- Tabela de Agendamentos (Serviços/Transporte)
CREATE TABLE agendamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome_paciente VARCHAR(100) NOT NULL,
    hospital VARCHAR(150) NOT NULL,
    data_hora_agendamento DATETIME NOT NULL,
    -- Exemplos de status: 'Em transporte', 'Concluído', 'Cancelado'
    status ENUM('Em transporte', 'Concluído', 'Cancelado') NOT NULL,
    -- Relacionamento opcional com motorista e veículo
    motorista_id INT,
    veiculo_id INT,
    FOREIGN KEY (motorista_id) REFERENCES motoristas(id),
    FOREIGN KEY (veiculo_id) REFERENCES veiculos(id)
);

-- Tabela de Resumo Diário (Métricas do Dashboard)
CREATE TABLE resumo_diario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_resumo DATE NOT NULL,
    quantidade_servicos INT DEFAULT 0,    -- Número de serviços/agendamentos realizados no dia (Serviços Hoje)
    faturamento DECIMAL(10,2) DEFAULT 0.00,   -- Faturamento do dia
    avaliacao DECIMAL(3,1) DEFAULT 0.0,       -- Avaliação média (ex.: 4.8)
    pendencias INT DEFAULT 0                  -- Número de pendências
);

-- Inserindo dados na tabela empresas
INSERT INTO empresas (nome, logo) VALUES 
('MediTransporte', 'meditransporte_logo.png'),
('Saúde Móvel', 'saude_movel_logo.png');

-- Inserindo dados na tabela motoristas
INSERT INTO motoristas (nome, status) VALUES 
('Carlos Silva', 'Disponível'),
('Ana Souza', 'Em serviço'),
('João Pereira', 'Disponível');

-- Inserindo dados na tabela veiculos
INSERT INTO veiculos (placa, status, ultima_manutencao) VALUES 
('ABC1D23', 'disponivel', '2024-01-10'),
('XYZ9W87', 'em_uso', '2024-02-15'),
('LMN4K56', 'manutencao', '2024-03-20');

-- Inserindo dados na tabela agendamentos
INSERT INTO agendamentos (nome_paciente, hospital, data_hora_agendamento, status, motorista_id, veiculo_id) VALUES 
('Maria Oliveira', 'Hospital Central', '2024-03-14 08:00:00', 'Em transporte', 1, 2),
('Pedro Santos', 'Clínica Vida', '2024-03-15 10:30:00', 'Concluído', 2, 1),
('Fernanda Costa', 'Hospital Esperança', '2024-03-16 14:00:00', 'Cancelado', 3, 3);

-- Inserindo dados na tabela resumo_diario
INSERT INTO resumo_diario (data_resumo, quantidade_servicos, faturamento, avaliacao, pendencias) VALUES 
('2024-03-14', 5, 1500.00, 4.5, 1),
('2024-03-15', 3, 900.00, 4.8, 0),
('2024-03-16', 4, 1200.00, 4.2, 2);
